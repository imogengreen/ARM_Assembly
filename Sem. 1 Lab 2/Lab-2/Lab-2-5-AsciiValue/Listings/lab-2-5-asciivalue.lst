


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CSU11021 Introduction to Computing I 2019/2020
    3 00000000         ; ASCII to value
    4 00000000         ;
    5 00000000         
    6 00000000                 AREA             RESET, CODE, READONLY
    7 00000000                 ENTRY
    8 00000000         
    9 00000000 EB00000E        BL               inithw      ; Get ready for con
                                                            sole I/O
   10 00000004         
   11 00000004         doGet
   12 00000004 EB000017        BL               get
   13 00000008 EB00001F        BL               put
   14 0000000C         
   15 0000000C         ; Extend the program to process each digit 0 ... 9
   16 0000000C         
   17 0000000C         ; The sequence of digits entered should be converted to 
                       a value
   18 0000000C         ;  which you should store in register R1.
   19 0000000C         
   20 0000000C         ; e.g. If the user enters '1', followed by '2', followed
                        by '8'
   21 0000000C         ;  followed by the RETURN key, your program should store
                        128 (base 10)
   22 0000000C         ;  in R1 (0x00000080).
   23 0000000C E3A0300A        LDR              R3, =10
   24 00000010 E3A04030        LDR              R4, ='0'
   25 00000014 E3A05039        LDR              R5, ='9'
   26 00000018         
   27 00000018 E1500004        CMP              R0, R4      ; while (R2 >= R4 
   28 0000001C 3A000004        BLO              notnum      ; && 
   29 00000020 E1500005        CMP              R0, R5      ; R2 <= R5)
   30 00000024 8A000002        BHI              notnum      ; {
   31 00000028 E0010193        MUL              R1, R3, R1  ; total = (10 * tot
                                                            al)
   32 0000002C E0400004        SUB              R0, R0, R4  ; value = ASCII cod
                                                            e - 0x30
   33 00000030 E0811000        ADD              R1, R1, R0  ; total = (10 * tot
                                                            al) + value 
   34 00000034         notnum                               ; }
   35 00000034         
   36 00000034 E350000D        CMP              R0, #0x0D   ; Stop when RETURN 
                                                            is entered (ASCII 0
                                                            x0A)
   37 00000038 1AFFFFF1        BNE              doGet
   38 0000003C         
   39 0000003C EAFFFFFE 
                       STOP    B                STOP
   40 00000040         
   41 00000040         ;
   42 00000040         ; You are free to ignore everything below this line
   43 00000040         ;
   44 00000040         
   45 00000040 E002C000 
                       PINSEL0 EQU              0xE002C000
   46 00000040 E000C000 
                       U0RBR   EQU              0xE000C000
   47 00000040 E000C000 



ARM Macro Assembler    Page 2 


                       U0THR   EQU              0xE000C000
   48 00000040 E000C00C 
                       U0LCR   EQU              0xE000C00C
   49 00000040 E000C014 
                       U0LSR   EQU              0xE000C014
   50 00000040         
   51 00000040         ;
   52 00000040         ; inithw subroutines
   53 00000040         ; performs hardware initialisation, including console
   54 00000040         ; parameters:
   55 00000040         ; none
   56 00000040         ; return value:
   57 00000040         ; none
   58 00000040         ;
   59 00000040         inithw
   60 00000040 E59FD078        LDR              SP, =0x40010000 ; initialse SP
   61 00000044 E92D0003        PUSH             {R0-R1}
   62 00000048 E59F0074        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
   63 0000004C E3A01050        MOV              R1, #0x50
   64 00000050 E5C01000        STRB             R1, [R0]
   65 00000054 E59F006C        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
   66 00000058 E3A01002        LDR              R1, =0x02
   67 0000005C E5C01000        STRB             R1, [R0]
   68 00000060 E8BD0003        POP              {R0-R1}
   69 00000064 E12FFF1E        BX               LR
   70 00000068         
   71 00000068         ;
   72 00000068         ; get subroutine
   73 00000068         ; returns the ASCII code of the next character read on t
                       he console
   74 00000068         ; parameters:
   75 00000068         ; none
   76 00000068         ; return value:
   77 00000068         ; R0 - ASCII code of the character read on teh console (
                       byte)
   78 00000068         ;
   79 00000068 E52D1004 
                       get     PUSH             {R1}
   80 0000006C E59F1058        LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
   81 00000070 E5910000 
                       get0    LDR              R0, [R1]    ; wait until
   82 00000074 E2100001        ANDS             R0, #0x01   ; receiver data
   83 00000078 0AFFFFFC        BEQ              get0        ; ready
   84 0000007C E59F104C        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
   85 00000080 E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
   86 00000084 E49D1004        POP              {R1}
   87 00000088 E12FFF1E        BX               LR          ; return
   88 0000008C         
   89 0000008C         ;
   90 0000008C         ; put subroutine
   91 0000008C         ; writes a character to the console
   92 0000008C         ; parameters:
   93 0000008C         ; R0 - ASCII code of the character to write



ARM Macro Assembler    Page 3 


   94 0000008C         ; return value:
   95 0000008C         ; none
   96 0000008C         ;
   97 0000008C E52D1004 
                       put     PUSH             {R1}
   98 00000090 E59F1034        LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
   99 00000094 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  100 00000098 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  101 0000009C 0AFFFFFA        BEQ              put         ; empty
  102 000000A0 E59F1028        LDR              R1, =U0THR  ; R1 -> U0THR
  103 000000A4 E5C10000        STRB             R0, [R1]    ; output charcter
  104 000000A8 E59F101C 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  105 000000AC E5D11000        LDRB             R1, [R1]    ; wait until
  106 000000B0 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  107 000000B4 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  108 000000B8 E49D1004        POP              {R1}
  109 000000BC E12FFF1E        BX               LR          ; return
  110 000000C0         
  111 000000C0                 END
              40010000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab-2-5-asciivalue.d -o.\objects\lab-2-5-asciivalue.o -IC:\Keil_v5\ARM\R
V31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine
="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 528" --list=.\listings\lab
-2-5-asciivalue.lst Lab-2-5-AsciiValue.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 6 in file Lab-2-5-AsciiValue.s
   Uses
      None
Comment: RESET unused
STOP 0000003C

Symbol: STOP
   Definitions
      At line 39 in file Lab-2-5-AsciiValue.s
   Uses
      At line 39 in file Lab-2-5-AsciiValue.s
Comment: STOP used once
doGet 00000004

Symbol: doGet
   Definitions
      At line 11 in file Lab-2-5-AsciiValue.s
   Uses
      At line 37 in file Lab-2-5-AsciiValue.s
Comment: doGet used once
get 00000068

Symbol: get
   Definitions
      At line 79 in file Lab-2-5-AsciiValue.s
   Uses
      At line 12 in file Lab-2-5-AsciiValue.s
Comment: get used once
get0 00000070

Symbol: get0
   Definitions
      At line 81 in file Lab-2-5-AsciiValue.s
   Uses
      At line 83 in file Lab-2-5-AsciiValue.s
Comment: get0 used once
inithw 00000040

Symbol: inithw
   Definitions
      At line 59 in file Lab-2-5-AsciiValue.s
   Uses
      At line 9 in file Lab-2-5-AsciiValue.s
Comment: inithw used once
notnum 00000034

Symbol: notnum
   Definitions
      At line 34 in file Lab-2-5-AsciiValue.s
   Uses
      At line 28 in file Lab-2-5-AsciiValue.s
      At line 30 in file Lab-2-5-AsciiValue.s

put 0000008C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: put
   Definitions
      At line 97 in file Lab-2-5-AsciiValue.s
   Uses
      At line 13 in file Lab-2-5-AsciiValue.s
      At line 101 in file Lab-2-5-AsciiValue.s

put0 000000A8

Symbol: put0
   Definitions
      At line 104 in file Lab-2-5-AsciiValue.s
   Uses
      At line 107 in file Lab-2-5-AsciiValue.s
Comment: put0 used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 45 in file Lab-2-5-AsciiValue.s
   Uses
      At line 62 in file Lab-2-5-AsciiValue.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 48 in file Lab-2-5-AsciiValue.s
   Uses
      At line 65 in file Lab-2-5-AsciiValue.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 49 in file Lab-2-5-AsciiValue.s
   Uses
      At line 80 in file Lab-2-5-AsciiValue.s
      At line 98 in file Lab-2-5-AsciiValue.s
      At line 104 in file Lab-2-5-AsciiValue.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 46 in file Lab-2-5-AsciiValue.s
   Uses
      At line 84 in file Lab-2-5-AsciiValue.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 47 in file Lab-2-5-AsciiValue.s
   Uses
      At line 102 in file Lab-2-5-AsciiValue.s
Comment: U0THR used once
5 symbols
348 symbols in table
